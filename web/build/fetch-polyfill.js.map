{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/whatwg-fetch/fetch.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","object","property","prototype","hasOwnProperty","p","s","self","fetch","support","searchParams","iterable","Symbol","blob","Blob","e","formData","arrayBuffer","Headers","append","normalizeName","normalizeValue","list","this","map","push","values","getAll","has","set","forEach","callback","thisArg","getOwnPropertyNames","keys","items","iteratorFor","entries","iterator","methods","Request","clone","Body","Response","_bodyInit","status","statusText","headers","url","error","response","type","redirectStatuses","redirect","indexOf","RangeError","location","input","init","Promise","resolve","reject","request","isPrototypeOf","xhr","XMLHttpRequest","onload","options","head","getAllResponseHeaders","trim","split","header","key","shift","join","responseURL","test","getResponseHeader","body","responseText","onerror","TypeError","ontimeout","open","method","credentials","withCredentials","responseType","setRequestHeader","send","polyfill","String","toLowerCase","next","done","undefined","consumed","bodyUsed","fileReaderReady","reader","result","readBlobAsArrayBuffer","FileReader","readAsArrayBuffer","_initBody","_bodyText","_bodyBlob","FormData","_bodyFormData","URLSearchParams","toString","ArrayBuffer","Error","rejected","then","text","readAsText","readBlobAsText","decode","json","JSON","parse","mode","upcased","toUpperCase","normalizeMethod","referrer","form","bytes","replace","decodeURIComponent","bodyInit","ok"],"mappings":"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","file":"fetch-polyfill.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 185);\n","(function(self) {\n  'use strict';\n\n  if (self.fetch) {\n    return\n  }\n\n  var support = {\n    searchParams: 'URLSearchParams' in self,\n    iterable: 'Symbol' in self && 'iterator' in Symbol,\n    blob: 'FileReader' in self && 'Blob' in self && (function() {\n      try {\n        new Blob()\n        return true\n      } catch(e) {\n        return false\n      }\n    })(),\n    formData: 'FormData' in self,\n    arrayBuffer: 'ArrayBuffer' in self\n  }\n\n  function normalizeName(name) {\n    if (typeof name !== 'string') {\n      name = String(name)\n    }\n    if (/[^a-z0-9\\-#$%&'*+.\\^_`|~]/i.test(name)) {\n      throw new TypeError('Invalid character in header field name')\n    }\n    return name.toLowerCase()\n  }\n\n  function normalizeValue(value) {\n    if (typeof value !== 'string') {\n      value = String(value)\n    }\n    return value\n  }\n\n  // Build a destructive iterator for the value list\n  function iteratorFor(items) {\n    var iterator = {\n      next: function() {\n        var value = items.shift()\n        return {done: value === undefined, value: value}\n      }\n    }\n\n    if (support.iterable) {\n      iterator[Symbol.iterator] = function() {\n        return iterator\n      }\n    }\n\n    return iterator\n  }\n\n  function Headers(headers) {\n    this.map = {}\n\n    if (headers instanceof Headers) {\n      headers.forEach(function(value, name) {\n        this.append(name, value)\n      }, this)\n\n    } else if (headers) {\n      Object.getOwnPropertyNames(headers).forEach(function(name) {\n        this.append(name, headers[name])\n      }, this)\n    }\n  }\n\n  Headers.prototype.append = function(name, value) {\n    name = normalizeName(name)\n    value = normalizeValue(value)\n    var list = this.map[name]\n    if (!list) {\n      list = []\n      this.map[name] = list\n    }\n    list.push(value)\n  }\n\n  Headers.prototype['delete'] = function(name) {\n    delete this.map[normalizeName(name)]\n  }\n\n  Headers.prototype.get = function(name) {\n    var values = this.map[normalizeName(name)]\n    return values ? values[0] : null\n  }\n\n  Headers.prototype.getAll = function(name) {\n    return this.map[normalizeName(name)] || []\n  }\n\n  Headers.prototype.has = function(name) {\n    return this.map.hasOwnProperty(normalizeName(name))\n  }\n\n  Headers.prototype.set = function(name, value) {\n    this.map[normalizeName(name)] = [normalizeValue(value)]\n  }\n\n  Headers.prototype.forEach = function(callback, thisArg) {\n    Object.getOwnPropertyNames(this.map).forEach(function(name) {\n      this.map[name].forEach(function(value) {\n        callback.call(thisArg, value, name, this)\n      }, this)\n    }, this)\n  }\n\n  Headers.prototype.keys = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push(name) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.values = function() {\n    var items = []\n    this.forEach(function(value) { items.push(value) })\n    return iteratorFor(items)\n  }\n\n  Headers.prototype.entries = function() {\n    var items = []\n    this.forEach(function(value, name) { items.push([name, value]) })\n    return iteratorFor(items)\n  }\n\n  if (support.iterable) {\n    Headers.prototype[Symbol.iterator] = Headers.prototype.entries\n  }\n\n  function consumed(body) {\n    if (body.bodyUsed) {\n      return Promise.reject(new TypeError('Already read'))\n    }\n    body.bodyUsed = true\n  }\n\n  function fileReaderReady(reader) {\n    return new Promise(function(resolve, reject) {\n      reader.onload = function() {\n        resolve(reader.result)\n      }\n      reader.onerror = function() {\n        reject(reader.error)\n      }\n    })\n  }\n\n  function readBlobAsArrayBuffer(blob) {\n    var reader = new FileReader()\n    reader.readAsArrayBuffer(blob)\n    return fileReaderReady(reader)\n  }\n\n  function readBlobAsText(blob) {\n    var reader = new FileReader()\n    reader.readAsText(blob)\n    return fileReaderReady(reader)\n  }\n\n  function Body() {\n    this.bodyUsed = false\n\n    this._initBody = function(body) {\n      this._bodyInit = body\n      if (typeof body === 'string') {\n        this._bodyText = body\n      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {\n        this._bodyBlob = body\n      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {\n        this._bodyFormData = body\n      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n        this._bodyText = body.toString()\n      } else if (!body) {\n        this._bodyText = ''\n      } else if (support.arrayBuffer && ArrayBuffer.prototype.isPrototypeOf(body)) {\n        // Only support ArrayBuffers for POST method.\n        // Receiving ArrayBuffers happens via Blobs, instead.\n      } else {\n        throw new Error('unsupported BodyInit type')\n      }\n\n      if (!this.headers.get('content-type')) {\n        if (typeof body === 'string') {\n          this.headers.set('content-type', 'text/plain;charset=UTF-8')\n        } else if (this._bodyBlob && this._bodyBlob.type) {\n          this.headers.set('content-type', this._bodyBlob.type)\n        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {\n          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')\n        }\n      }\n    }\n\n    if (support.blob) {\n      this.blob = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return Promise.resolve(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as blob')\n        } else {\n          return Promise.resolve(new Blob([this._bodyText]))\n        }\n      }\n\n      this.arrayBuffer = function() {\n        return this.blob().then(readBlobAsArrayBuffer)\n      }\n\n      this.text = function() {\n        var rejected = consumed(this)\n        if (rejected) {\n          return rejected\n        }\n\n        if (this._bodyBlob) {\n          return readBlobAsText(this._bodyBlob)\n        } else if (this._bodyFormData) {\n          throw new Error('could not read FormData body as text')\n        } else {\n          return Promise.resolve(this._bodyText)\n        }\n      }\n    } else {\n      this.text = function() {\n        var rejected = consumed(this)\n        return rejected ? rejected : Promise.resolve(this._bodyText)\n      }\n    }\n\n    if (support.formData) {\n      this.formData = function() {\n        return this.text().then(decode)\n      }\n    }\n\n    this.json = function() {\n      return this.text().then(JSON.parse)\n    }\n\n    return this\n  }\n\n  // HTTP methods whose capitalization should be normalized\n  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']\n\n  function normalizeMethod(method) {\n    var upcased = method.toUpperCase()\n    return (methods.indexOf(upcased) > -1) ? upcased : method\n  }\n\n  function Request(input, options) {\n    options = options || {}\n    var body = options.body\n    if (Request.prototype.isPrototypeOf(input)) {\n      if (input.bodyUsed) {\n        throw new TypeError('Already read')\n      }\n      this.url = input.url\n      this.credentials = input.credentials\n      if (!options.headers) {\n        this.headers = new Headers(input.headers)\n      }\n      this.method = input.method\n      this.mode = input.mode\n      if (!body) {\n        body = input._bodyInit\n        input.bodyUsed = true\n      }\n    } else {\n      this.url = input\n    }\n\n    this.credentials = options.credentials || this.credentials || 'omit'\n    if (options.headers || !this.headers) {\n      this.headers = new Headers(options.headers)\n    }\n    this.method = normalizeMethod(options.method || this.method || 'GET')\n    this.mode = options.mode || this.mode || null\n    this.referrer = null\n\n    if ((this.method === 'GET' || this.method === 'HEAD') && body) {\n      throw new TypeError('Body not allowed for GET or HEAD requests')\n    }\n    this._initBody(body)\n  }\n\n  Request.prototype.clone = function() {\n    return new Request(this)\n  }\n\n  function decode(body) {\n    var form = new FormData()\n    body.trim().split('&').forEach(function(bytes) {\n      if (bytes) {\n        var split = bytes.split('=')\n        var name = split.shift().replace(/\\+/g, ' ')\n        var value = split.join('=').replace(/\\+/g, ' ')\n        form.append(decodeURIComponent(name), decodeURIComponent(value))\n      }\n    })\n    return form\n  }\n\n  function headers(xhr) {\n    var head = new Headers()\n    var pairs = (xhr.getAllResponseHeaders() || '').trim().split('\\n')\n    pairs.forEach(function(header) {\n      var split = header.trim().split(':')\n      var key = split.shift().trim()\n      var value = split.join(':').trim()\n      head.append(key, value)\n    })\n    return head\n  }\n\n  Body.call(Request.prototype)\n\n  function Response(bodyInit, options) {\n    if (!options) {\n      options = {}\n    }\n\n    this.type = 'default'\n    this.status = options.status\n    this.ok = this.status >= 200 && this.status < 300\n    this.statusText = options.statusText\n    this.headers = options.headers instanceof Headers ? options.headers : new Headers(options.headers)\n    this.url = options.url || ''\n    this._initBody(bodyInit)\n  }\n\n  Body.call(Response.prototype)\n\n  Response.prototype.clone = function() {\n    return new Response(this._bodyInit, {\n      status: this.status,\n      statusText: this.statusText,\n      headers: new Headers(this.headers),\n      url: this.url\n    })\n  }\n\n  Response.error = function() {\n    var response = new Response(null, {status: 0, statusText: ''})\n    response.type = 'error'\n    return response\n  }\n\n  var redirectStatuses = [301, 302, 303, 307, 308]\n\n  Response.redirect = function(url, status) {\n    if (redirectStatuses.indexOf(status) === -1) {\n      throw new RangeError('Invalid status code')\n    }\n\n    return new Response(null, {status: status, headers: {location: url}})\n  }\n\n  self.Headers = Headers\n  self.Request = Request\n  self.Response = Response\n\n  self.fetch = function(input, init) {\n    return new Promise(function(resolve, reject) {\n      var request\n      if (Request.prototype.isPrototypeOf(input) && !init) {\n        request = input\n      } else {\n        request = new Request(input, init)\n      }\n\n      var xhr = new XMLHttpRequest()\n\n      function responseURL() {\n        if ('responseURL' in xhr) {\n          return xhr.responseURL\n        }\n\n        // Avoid security warnings on getResponseHeader when not allowed by CORS\n        if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n          return xhr.getResponseHeader('X-Request-URL')\n        }\n\n        return\n      }\n\n      xhr.onload = function() {\n        var options = {\n          status: xhr.status,\n          statusText: xhr.statusText,\n          headers: headers(xhr),\n          url: responseURL()\n        }\n        var body = 'response' in xhr ? xhr.response : xhr.responseText\n        resolve(new Response(body, options))\n      }\n\n      xhr.onerror = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.ontimeout = function() {\n        reject(new TypeError('Network request failed'))\n      }\n\n      xhr.open(request.method, request.url, true)\n\n      if (request.credentials === 'include') {\n        xhr.withCredentials = true\n      }\n\n      if ('responseType' in xhr && support.blob) {\n        xhr.responseType = 'blob'\n      }\n\n      request.headers.forEach(function(value, name) {\n        xhr.setRequestHeader(name, value)\n      })\n\n      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)\n    })\n  }\n  self.fetch.polyfill = true\n})(typeof self !== 'undefined' ? self : this);\n"],"sourceRoot":""}