{"version":3,"sources":["webpack:///./node_modules/progressive-web-sdk/dist/components/breadcrumbs/index.js","webpack:///./node_modules/progressive-web-sdk/dist/components/pagination/index.js","webpack:///./app/containers/account-order-list/selectors.js","webpack:///./app/containers/account-order-list/partials/account-order-block.js","webpack:///./app/containers/account-order-list/container.jsx"],"names":["Object","defineProperty","exports","value","_extends3","_interopRequireDefault","__webpack_require__","_react2","_propTypes2","_classnames2","_link2","obj","__esModule","default","Breadcrumbs","_ref","className","items","youAreHereMessage","includeMicroData","length","breadcrumbListMicroData","listMicroData","thingMicroData","itemScope","itemType","itemProp","createElement","role","id","text","aria-labelledby","map","_ref2","index","href","onClick","itemContent","content","key","defaultProps","propTypes","arrayOf","shape","oneOfType","string","node","required","func","isRequired","bool","_getPrototypeOf2","_classCallCheck3","_createClass3","_possibleConstructorReturn3","_inherits3","_button2","_icon2","_utils","_dataObjects","Pagination","_React$Component","props","this","_this","__proto__","call","goToStart","bind","goBack","goForward","goToEnd","goToSelected","i","pageClasses","pw--active","currentPage","onChange","data-analytics-name","UI_NAME","pagination","data-analytics-content","page","getPageButtonMessage","lower","upper","list","push","renderPageButton","pageCount","_this2","Array","fill","undefined","val","toString","getCurrentPageMessage","getSelectOptionMessage","e","parseInt","target","_props","pagesToShow","firstButton","prevButton","nextButton","lastButton","isSelect","showPageButtons","showCurrentPageMessage","selectIcon","_props2","pagesToShowAtEnd","pagesToShowAtStart","classes","pw--select-pagination","visiblePages","Math","min","centerChunkLength","pageBeforeEnd","centerChunkStart","centerChunkEnd","console","error","atStart","atEnd","Ellipsis","disabled","previous","renderPageButtons","onBlur","buildSelectOptions","name","next","Component","current","total","pageNumber","noop","number","object","getAccountOrderList","createSelector","getUi","accountOrderList","PLACEHOLDER","createGetSelector","getOrdersPage","getOrdersPageMeta","Immutable","Map","getOrderList","getUser","user","get","toIndexedSeq","toArray","order","toJS","slice","getNumOrderPages","ceil","OrderBlock","date","shippingAddress","status","react_default","a","skeleton_text_default","width","style","lineHeight","display","fullName","intl","PropTypes","NoOrder","dashboardURL","breadcrumbs_default","icon_default","size","title","AccountOrderList","reorderItems","orders","pageMeta","setOrderListPage","navigateToOrder","numOfOrderPages","page_meta","card","hasBorder","header","orderNumber","children","account_order_block","footer","button_default","viewHref","type","icon","showIconText","iconClassName","view","reorder","pagination_default","container_NoOrder","array","initAction","initialize","mapStateToProps","createPropsSelector","getAccountURL","mapDispatchToProps","template","connect"],"mappings":"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","file":"account-order-list.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _link = require('../link');\n\nvar _link2 = _interopRequireDefault(_link);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * `Breadcrumbs` is used to provide users a navigational path they took to get to the current page.\n *\n * @example ./DESIGN.md\n */\n\n/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */\n/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n\nvar Breadcrumbs = function Breadcrumbs(_ref) {\n    var className = _ref.className,\n        items = _ref.items,\n        youAreHereMessage = _ref.youAreHereMessage,\n        includeMicroData = _ref.includeMicroData;\n\n    if (!items.length) {\n        return false;\n    }\n\n    var breadcrumbListMicroData = {};\n    var listMicroData = {};\n    var thingMicroData = {};\n\n    if (includeMicroData) {\n        breadcrumbListMicroData = {\n            itemScope: true,\n            itemType: 'http://schema.org/BreadcrumbList'\n        };\n        listMicroData = {\n            itemProp: 'itemListElement',\n            itemScope: true,\n            itemType: 'http://schema.org/ListItem'\n        };\n        thingMicroData = {\n            itemScope: true,\n            itemProp: 'item',\n            itemType: 'http://schema.org/Thing'\n        };\n    }\n\n    return _react2.default.createElement(\n        'nav',\n        { role: 'navigation', className: (0, _classnames2.default)('pw-breadcrumbs', className) },\n        _react2.default.createElement(\n            'p',\n            { id: 'breadcrumb__label', className: 'pw-breadcrumbs__label u-visually-hidden' },\n            youAreHereMessage,\n            ': ',\n            items[items.length - 1].text\n        ),\n        _react2.default.createElement(\n            'ol',\n            (0, _extends3.default)({ 'aria-labelledby': 'breadcrumb__label', className: 'pw-breadcrumbs__list' }, breadcrumbListMicroData),\n            items.map(function (_ref2, index) {\n                var href = _ref2.href,\n                    text = _ref2.text,\n                    onClick = _ref2.onClick;\n\n                var itemContent = includeMicroData ? _react2.default.createElement(\n                    'span',\n                    { itemProp: 'name' },\n                    text,\n                    href && _react2.default.createElement('meta', { itemProp: 'url', content: href })\n                ) : text;\n                return _react2.default.createElement(\n                    'li',\n                    (0, _extends3.default)({ className: 'pw-breadcrumbs__item', key: index }, listMicroData),\n                    href || onClick ? _react2.default.createElement(\n                        _link2.default,\n                        (0, _extends3.default)({\n                            href: href,\n                            className: 'pw-breadcrumbs__link',\n                            onClick: onClick\n                        }, thingMicroData),\n                        itemContent\n                    ) : _react2.default.createElement(\n                        'span',\n                        (0, _extends3.default)({\n                            className: 'pw-breadcrumbs__non-link'\n                        }, thingMicroData),\n                        itemContent\n                    ),\n                    includeMicroData && _react2.default.createElement('meta', { itemProp: 'position', content: index + 1 })\n                );\n            })\n        )\n    );\n};\n\nBreadcrumbs.defaultProps = {\n    items: [],\n    youAreHereMessage: 'You are here'\n};\n\nBreadcrumbs.propTypes = {\n    /**\n     * The list of breadcrumbs.\n     * Each breadcrumb item should be an object (More info on items prop below).\n     */\n    items: _propTypes2.default.arrayOf(_propTypes2.default.shape({\n        text: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]).required,\n        href: _propTypes2.default.string,\n        onClick: _propTypes2.default.func\n    })).isRequired,\n\n    /**\n     * Adds values to the `class` attribute of the root element.\n     */\n    className: _propTypes2.default.string,\n\n    /**\n     * Indicates if SEO microdata should be included in the breadcrumb element\n     * https://developers.google.com/search/docs/data-types/breadcrumbs\n     * https://www.w3.org/TR/microdata/\n     */\n    includeMicroData: _propTypes2.default.bool,\n\n    /**\n     * This component has a visually hidden label to make it more accessible to screen readers.\n     * You can change this property to change the label's content.\n     */\n    youAreHereMessage: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node])\n};\n\nexports.default = Breadcrumbs;","'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _extends2 = require('babel-runtime/helpers/extends');\n\nvar _extends3 = _interopRequireDefault(_extends2);\n\nvar _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');\n\nvar _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _createClass2 = require('babel-runtime/helpers/createClass');\n\nvar _createClass3 = _interopRequireDefault(_createClass2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _classnames = require('classnames');\n\nvar _classnames2 = _interopRequireDefault(_classnames);\n\nvar _button = require('../button');\n\nvar _button2 = _interopRequireDefault(_button);\n\nvar _icon = require('../icon');\n\nvar _icon2 = _interopRequireDefault(_icon);\n\nvar _utils = require('../../utils/utils');\n\nvar _dataObjects = require('../../analytics/data-objects');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n * Pagination is a way of breaking down large listings into smaller,\n * more digestible chunks and allowing the user to step through them in sequential\n * (or random) order.\n *\n * @example ./DESIGN.md\n */\nvar Pagination = function (_React$Component) {\n    (0, _inherits3.default)(Pagination, _React$Component);\n\n    function Pagination(props) {\n        (0, _classCallCheck3.default)(this, Pagination);\n\n        var _this = (0, _possibleConstructorReturn3.default)(this, (Pagination.__proto__ || (0, _getPrototypeOf2.default)(Pagination)).call(this, props));\n\n        _this.goToStart = _this.goToStart.bind(_this);\n        _this.goBack = _this.goBack.bind(_this);\n        _this.goForward = _this.goForward.bind(_this);\n        _this.goToEnd = _this.goToEnd.bind(_this);\n        _this.goToSelected = _this.goToSelected.bind(_this);\n        return _this;\n    }\n\n    (0, _createClass3.default)(Pagination, [{\n        key: 'renderPageButton',\n        value: function renderPageButton(i) {\n            var pageClasses = (0, _classnames2.default)('pw-pagination__page', {\n                'pw--active': i === this.props.currentPage\n            });\n\n            return _react2.default.createElement(\n                _button2.default,\n                {\n                    key: i,\n                    className: pageClasses,\n                    onClick: this.props.onChange.bind(null, i),\n                    'data-analytics-name': _dataObjects.UI_NAME.pagination,\n                    'data-analytics-content': _dataObjects.UI_NAME.page + ' ' + i\n                },\n                this.props.getPageButtonMessage(i)\n            );\n        }\n    }, {\n        key: 'renderPageButtons',\n        value: function renderPageButtons(lower, upper) {\n            var list = [];\n            for (var i = lower; i <= upper; i++) {\n                list.push(this.renderPageButton(i));\n            }\n            return list;\n        }\n    }, {\n        key: 'buildSelectOptions',\n        value: function buildSelectOptions(pageCount) {\n            var _this2 = this;\n\n            return new Array(pageCount).fill(undefined).map(function (val, index) {\n                var newIndex = ++index;\n                var value = newIndex.toString();\n                return _react2.default.createElement(\n                    'option',\n                    { value: value, key: index },\n                    _this2.props.currentPage === index ? _this2.props.getCurrentPageMessage(value, pageCount) : _this2.props.getSelectOptionMessage(value, pageCount)\n                );\n            });\n        }\n    }, {\n        key: 'goToStart',\n        value: function goToStart() {\n            this.props.onChange(1);\n        }\n    }, {\n        key: 'goBack',\n        value: function goBack() {\n            this.props.onChange(this.props.currentPage - 1);\n        }\n    }, {\n        key: 'goForward',\n        value: function goForward() {\n            this.props.onChange(this.props.currentPage + 1);\n        }\n    }, {\n        key: 'goToEnd',\n        value: function goToEnd() {\n            this.props.onChange(this.props.pageCount);\n        }\n    }, {\n        key: 'goToSelected',\n        value: function goToSelected(e) {\n            this.props.onChange(parseInt(e.target.value));\n        }\n    }, {\n        key: 'render',\n        value: function render() {\n            var _props = this.props,\n                className = _props.className,\n                pageCount = _props.pageCount,\n                pagesToShow = _props.pagesToShow,\n                currentPage = _props.currentPage,\n                firstButton = _props.firstButton,\n                prevButton = _props.prevButton,\n                nextButton = _props.nextButton,\n                lastButton = _props.lastButton,\n                isSelect = _props.isSelect,\n                showPageButtons = _props.showPageButtons,\n                showCurrentPageMessage = _props.showCurrentPageMessage,\n                getCurrentPageMessage = _props.getCurrentPageMessage,\n                selectIcon = _props.selectIcon;\n            var _props2 = this.props,\n                pagesToShowAtEnd = _props2.pagesToShowAtEnd,\n                pagesToShowAtStart = _props2.pagesToShowAtStart;\n\n\n            var classes = (0, _classnames2.default)('pw-pagination', {\n                'pw--select-pagination': isSelect\n            }, className);\n\n            var visiblePages = Math.min(pagesToShow || pageCount, pageCount);\n            var centerChunkLength = visiblePages - pagesToShowAtStart - pagesToShowAtEnd;\n\n            // if visible pages is equal to pagesToShowAtEnd and pagesToShowAtStart combined\n            // show subset of pages without start and end\n            if (visiblePages === pagesToShowAtStart + pagesToShowAtEnd) {\n                pagesToShowAtStart = 0;\n                pagesToShowAtEnd = 0;\n                centerChunkLength = visiblePages;\n            }\n\n            // Pages are 1 indexed\n            var pageBeforeEnd = pageCount - pagesToShowAtEnd;\n\n            // Offset the center chunk from the start and end\n            var centerChunkStart = 1 + pagesToShowAtStart;\n            var centerChunkEnd = Math.min(centerChunkStart + centerChunkLength - 1, pageBeforeEnd);\n\n            // If the current page isn't visible in the center,\n            // shift the center so that it is\n            // Also show the value following the current page\n            if (currentPage >= centerChunkEnd && centerChunkStart !== centerChunkEnd) {\n                centerChunkEnd = Math.min(currentPage + 1, pageBeforeEnd);\n                centerChunkStart = centerChunkEnd - centerChunkLength + 1;\n            } else if (currentPage > centerChunkEnd && centerChunkStart === centerChunkEnd) {\n                // do not shift the center when there is 1 page in the chunk\n                centerChunkStart = Math.min(currentPage, pageBeforeEnd);\n                centerChunkEnd = centerChunkStart;\n            }\n\n            if (pageCount < pagesToShow || centerChunkLength < 0) {\n                if (centerChunkLength < 0) {\n                    console.error('The pagesToShow prop must be >= pagesToShowAtStart + pagesToShowAtEnd. Ignoring pagesToShowAtStart and pagesToShowAtEnd.');\n                }\n                pagesToShowAtStart = 0;\n                pagesToShowAtEnd = 0;\n                centerChunkStart = 1;\n                centerChunkEnd = pageCount;\n                pageBeforeEnd = pageCount;\n            }\n\n            var atStart = currentPage === 1;\n            var atEnd = currentPage === pageCount;\n\n            var Ellipsis = function Ellipsis() {\n                return _react2.default.createElement(\n                    'div',\n                    { className: 'pw-pagination__ellipsis' },\n                    '...'\n                );\n            };\n\n            return _react2.default.createElement(\n                'nav',\n                { role: 'navigation', className: classes },\n                firstButton && _react2.default.createElement(\n                    _button2.default,\n                    (0, _extends3.default)({\n                        className: 'pw-pagination__button',\n                        onClick: this.goToStart,\n                        disabled: atStart,\n                        'data-analytics-name': _dataObjects.UI_NAME.pagination,\n                        'data-analytics-content': _dataObjects.UI_NAME.page + ' 1'\n                    }, firstButton.props),\n                    firstButton.text\n                ),\n                prevButton && _react2.default.createElement(\n                    _button2.default,\n                    (0, _extends3.default)({\n                        className: 'pw-pagination__button',\n                        onClick: this.goBack,\n                        disabled: atStart,\n                        'data-analytics-name': _dataObjects.UI_NAME.pagination,\n                        'data-analytics-content': _dataObjects.UI_NAME.previous\n                    }, prevButton.props),\n                    prevButton.text\n                ),\n                _react2.default.createElement(\n                    'div',\n                    { className: 'pw-pagination__content' },\n                    showPageButtons && _react2.default.createElement(\n                        'div',\n                        { className: 'pw-pagination__pages' },\n                        this.renderPageButtons(1, pagesToShowAtStart),\n                        pagesToShowAtStart && centerChunkStart > pagesToShowAtStart + 1 ? _react2.default.createElement(Ellipsis, { key: 'firstEllipsis' }) : false,\n                        this.renderPageButtons(centerChunkStart, centerChunkEnd),\n                        pagesToShowAtEnd && centerChunkEnd < pageBeforeEnd ? _react2.default.createElement(Ellipsis, { key: 'secondEllipsis' }) : false,\n                        this.renderPageButtons(pageBeforeEnd + 1, pageCount)\n                    ),\n                    isSelect && _react2.default.createElement(\n                        'div',\n                        { className: 'pw-pagination__select-wrapper' },\n                        _react2.default.createElement(\n                            'select',\n                            {\n                                className: 'pw-pagination__select',\n                                onBlur: this.goToSelected,\n                                onChange: this.goToSelected,\n                                value: currentPage\n                            },\n                            this.buildSelectOptions(pageCount)\n                        ),\n                        _react2.default.createElement(\n                            'div',\n                            { className: 'pw-pagination__select-icon' },\n                            _react2.default.createElement(_icon2.default, { name: selectIcon || 'caret-bottom' })\n                        )\n                    ),\n                    showCurrentPageMessage && _react2.default.createElement(\n                        'span',\n                        { className: 'pw-pagination__page-count' },\n                        getCurrentPageMessage(currentPage, pageCount)\n                    )\n                ),\n                nextButton && _react2.default.createElement(\n                    _button2.default,\n                    (0, _extends3.default)({\n                        className: 'pw-pagination__button',\n                        onClick: this.goForward,\n                        disabled: atEnd,\n                        'data-analytics-name': _dataObjects.UI_NAME.pagination,\n                        'data-analytics-content': _dataObjects.UI_NAME.next\n                    }, nextButton.props),\n                    nextButton.text\n                ),\n                lastButton && _react2.default.createElement(\n                    _button2.default,\n                    (0, _extends3.default)({\n                        className: 'pw-pagination__button',\n                        onClick: this.goToEnd,\n                        disabled: atEnd,\n                        'data-analytics-name': _dataObjects.UI_NAME.pagination,\n                        'data-analytics-content': _dataObjects.UI_NAME.page + ' ' + pageCount\n                    }, lastButton.props),\n                    lastButton.text\n                )\n            );\n        }\n    }]);\n    return Pagination;\n}(_react2.default.Component); /* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */\n/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n\nvar defaultGetCurrentPageMessage = function defaultGetCurrentPageMessage(current, total) {\n    return 'Page ' + current + ' of ' + total;\n};\n\nvar defaultGetPageButtonMessage = function defaultGetPageButtonMessage(pageNumber) {\n    return _react2.default.createElement(\n        'span',\n        null,\n        _react2.default.createElement(\n            'span',\n            { className: 'pw-pagination__hidden-label' },\n            'Page '\n        ),\n        pageNumber\n    );\n};\n\nvar defaultSelectOptionMessage = function defaultSelectOptionMessage(current, total) {\n    return 'Page ' + current + ' of ' + total;\n};\n\nPagination.defaultProps = {\n    getCurrentPageMessage: defaultGetCurrentPageMessage,\n    getPageButtonMessage: defaultGetPageButtonMessage,\n    getSelectOptionMessage: defaultSelectOptionMessage,\n    nextButton: {\n        text: 'Next'\n    },\n    prevButton: {\n        text: 'Prev'\n    },\n    pagesToShowAtStart: 0,\n    pagesToShowAtEnd: 0,\n    showPageButtons: true,\n    showCurrentPageMessage: true,\n    onChange: _utils.noop\n};\n\nPagination.propTypes = {\n    /**\n     * The current page number.\n     */\n    currentPage: _propTypes2.default.number.isRequired,\n\n    /**\n     * The number of pages shown in pagination.\n     */\n    pageCount: _propTypes2.default.number.isRequired,\n\n    /**\n     * Adds values to the `class` attribute of the root element.\n     */\n    className: _propTypes2.default.string,\n\n    /**\n     * The properties for First Button (It's used to go to the very first page).\n     */\n    firstButton: _propTypes2.default.shape({\n        text: _propTypes2.default.string,\n        props: _propTypes2.default.object\n    }),\n\n    /**\n     * This function should return a string (or node) that describes the user's current location in the pagination.\n     * It will be passed the current page and total number of pages.\n     */\n    getCurrentPageMessage: _propTypes2.default.func,\n\n    /**\n     * This function should return a string (or node) to be used for the page buttons.\n     * It will be passed the button's page number.\n     */\n    getPageButtonMessage: _propTypes2.default.func,\n\n    /**\n     * This function should return a string for the select option of pagination.\n     * It will be passed the current page and total number of pages.\n     */\n    getSelectOptionMessage: _propTypes2.default.func,\n\n    /**\n     * Defines if pagination is a select pagination.\n     */\n    isSelect: _propTypes2.default.bool,\n\n    /**\n     * The properties for Last Button (It's used to go to the very last page).\n     */\n    lastButton: _propTypes2.default.shape({\n        text: _propTypes2.default.string,\n        props: _propTypes2.default.object\n    }),\n\n    /**\n     * The properties for Next Button (It's used to go to the next page).\n     */\n    nextButton: _propTypes2.default.shape({\n        text: _propTypes2.default.string,\n        props: _propTypes2.default.object\n    }),\n\n    /**\n     * The total number of pages to show.\n     * If you provide pagesToShowAtStart or pagesToShowAtEnd, they will be subtracted from this number.\n     */\n    pagesToShow: _propTypes2.default.number,\n\n    /**\n     * The number of pages to always show at the end of the pagination.\n     */\n    pagesToShowAtEnd: _propTypes2.default.number,\n\n    /**\n     * The number of pages to always show at the start of the pagination.\n     */\n    pagesToShowAtStart: _propTypes2.default.number,\n\n    /**\n     * The properties for Previous Button (It's used to go to the previous page).\n     */\n    prevButton: _propTypes2.default.shape({\n        text: _propTypes2.default.string,\n        props: _propTypes2.default.object\n    }),\n\n    /**\n     * Name of SVG icon for select drop down.\n     * For more information about available icons, see the [Icon component](#!/Icon).\n     */\n    selectIcon: _propTypes2.default.string,\n\n    /**\n     * If false, the current page message will not be shown.\n     */\n    showCurrentPageMessage: _propTypes2.default.bool,\n\n    /**\n     * If false, the page buttons(numbers) will not be shown.\n     */\n    showPageButtons: _propTypes2.default.bool,\n\n    /**\n     * This function is called whenever the page is changed.\n     * This function is also responsible for updating the props that are passed to the pagination component.\n     */\n    onChange: _propTypes2.default.func\n};\n\nexports.default = Pagination;","/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */\n/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n\nimport {createSelector} from 'reselect'\nimport {createGetSelector} from 'reselect-immutable-helpers'\nimport Immutable from 'immutable'\n\nimport {getUi} from '../../store/selectors'\n\nimport {getUser} from 'progressive-web-sdk/dist/store/user/selectors'\n\n\nexport const getAccountOrderList = createSelector(\n    getUi,\n    ({accountOrderList}) => accountOrderList\n)\n\nexport const getTitle = createGetSelector(getAccountOrderList, 'title')\n\nconst PLACEHOLDER = {\n    text: undefined\n}\n\nexport const getOrdersPage = createGetSelector(getAccountOrderList, 'pageNumber', 1)\n\nexport const getOrdersPageMeta = createGetSelector(getAccountOrderList, 'pageMeta', Immutable.Map())\n\nexport const getOrderList = createSelector(getUser, getOrdersPage, (user, pageNumber) => {\n\n    const orders = user && user.get('orders') ? user\n        .get('orders')\n        .toIndexedSeq()\n        .toArray()\n        .map((order) => order.toJS()) : new Array(3).fill(PLACEHOLDER)\n\n    return orders.slice((pageNumber - 1) * 5, pageNumber * 5)\n})\n\nexport const getNumOrderPages = createSelector(getUser, (user) => {\n    return user && user.get('orders') ? Math.ceil(user\n        .get('orders')\n        .toIndexedSeq()\n        .toArray()\n        .length / 5) : 3 // same number of PLACEHOLDERS (new Array(3).fill(PLACEHOLDER))\n})\n","/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */\n/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nimport SkeletonText from 'progressive-web-sdk/dist/components/skeleton-text'\nimport {FormattedPrice} from '../../../components/intl/index'\n\nconst OrderBlock = ({\n    date,\n    total,\n    shippingAddress,\n    status,\n}) => (\n    <div className=\"u-padding-md\">\n        <dl className=\"u-margin-0\">\n            <div className=\"u-flexbox\">\n                <dt className=\"u-flex u-margin-0 u-text-weight-regular u-color-neutral-50\">Date</dt>\n                {date ?\n                    <dd className=\"u-flex\">{date}</dd>\n                :\n                    <SkeletonText className=\"u-flex\" width=\"40%\" style={{lineHeight: '20px', display: 'block'}} />\n                }\n            </div>\n            <div className=\"u-flexbox\">\n                <dt className=\"u-flex u-margin-0 u-text-weight-regular u-color-neutral-50\">Ship to</dt>\n                {shippingAddress ?\n                    <dd className=\"u-flex\">{shippingAddress.fullName}</dd>\n                :\n                    <SkeletonText className=\"u-flex\" width=\"50%\" style={{lineHeight: '20px', display: 'block'}} />\n                }\n            </div>\n            <div className=\"u-flexbox\">\n                <dt className=\"u-flex u-margin-0 u-text-weight-regular u-color-neutral-50\">Order total</dt>\n                {total ?\n                    <dd className=\"u-flex\">\n                        <FormattedPrice value={total} />\n                    </dd>\n                :\n                    <SkeletonText className=\"u-flex\" width=\"30%\" style={{lineHeight: '20px', display: 'block'}} />\n                }\n            </div>\n            <div className=\"u-flexbox\">\n                <dt className=\"u-flex u-margin-0 u-text-weight-regular u-color-neutral-50\">Status</dt>\n                {status ?\n                    <dd className=\"u-flex\">{status}</dd>\n                :\n                    <SkeletonText className=\"u-flex\" width=\"40%\" style={{lineHeight: '20px', display: 'block'}} />\n                }\n            </div>\n        </dl>\n    </div>\n)\n\nOrderBlock.propTypes = {\n    date: PropTypes.string,\n    shippingAddress: PropTypes.object,\n    status: PropTypes.string,\n    total: PropTypes.string\n}\n\nexport default OrderBlock\n","/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n/* Copyright (c) 2018 Mobify Research & Development Inc. All rights reserved. */\n/* * *  *  * *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  *  * */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\nimport {connect} from 'react-redux'\nimport {createPropsSelector} from 'reselect-immutable-helpers'\n\nimport template from '../../template'\nimport PageMeta from '../../components/page-meta'\nimport Card from '../../components/card'\n\nimport {getAccountURL} from '../app/selectors'\n\nimport Breadcrumbs from 'progressive-web-sdk/dist/components/breadcrumbs'\nimport Button from 'progressive-web-sdk/dist/components/button'\nimport Icon from 'progressive-web-sdk/dist/components/icon'\n\nimport {UI_NAME} from 'progressive-web-sdk/dist/analytics/data-objects/'\nimport {\n    getOrderList,\n    getOrdersPage,\n    getOrdersPageMeta,\n    getNumOrderPages\n} from './selectors'\nimport {initialize, reorderItems, setOrderListPage, navigateToOrder} from './actions'\n\nimport SkeletonText from 'progressive-web-sdk/dist/components/skeleton-text'\nimport Pagination from 'progressive-web-sdk/dist/components/pagination'\n\nimport OrderBlock from './partials/account-order-block'\n\n\nconst NoOrder = ({dashboardURL}) => (\n    <div className=\"t-account-order-list__empty\">\n        <div className=\"t-account-order-list__heading u-padding-top-lg u-padding-bottom-lg u-padding-start-md u-padding-end-md\">\n            <div className=\"t-account-order-list__breadcrumb\">\n                <Breadcrumbs items={[{text: 'Back to Dashboard', href: dashboardURL}]} />\n            </div>\n            <div className=\"u-margin-top-md\">\n                <h1 className=\"t-account-order-list__title u-text-uppercase u-width-1of2\">My Orders</h1>\n            </div>\n        </div>\n        <div className=\"u-padding-md u-margin-top-lg u-flexbox u-direction-column u-align-center u-justify-center\">\n            <Icon\n                name=\"empty\"\n                className=\"u-color-brand\"\n                size=\"huge\"\n                title=\"Empty\"\n            />\n            <div className=\"u-text-align-center u-padding-lg\">\n                You have placed no orders.\n            </div>\n        </div>\n    </div>\n)\n\nNoOrder.propTypes = {\n    dashboardURL: PropTypes.string,\n}\n\nconst AccountOrderList = ({\n    reorderItems,\n    dashboardURL,\n    orders,\n    pageMeta,\n    setOrderListPage,\n    navigateToOrder,\n    currentPage,\n    numOfOrderPages\n}) => {\n    return (\n        <div>\n            <PageMeta {...pageMeta} />\n\n            {orders.length ?\n                <div className=\"t-account-order-list\">\n                    <div className=\"t-account-order-list__headings u-padding-top-lg u-padding-bottom-lg u-padding-start-md u-padding-end-md\">\n                        <div className=\"t-account-order-list__breadcrumb\">\n                            <Breadcrumbs items={[{text: 'Back to Dashboard', href: dashboardURL}]} />\n                        </div>\n                        <div className=\"u-margin-top-md\">\n                            <h1 className=\"t-account-order-list__title u-text-uppercase u-width-1of2\">My Orders</h1>\n                        </div>\n                    </div>\n                    <div className=\"t-account-order-list__content u-padding-md\">\n                        {orders.map((order, id) => (\n                            <Card\n                                hasBorder\n                                key={id}\n                                header={\n                                    <div>\n                                        {order.orderNumber ?\n                                            <h3 className=\"u-padding-top-md u-padding-start-md u-padding-end-md\">Order # {order.orderNumber}</h3>\n                                        :\n                                            <SkeletonText className=\"u-padding-top-md u-padding-start-md u-padding-end-md\" width=\"40%\" style={{lineHeight: '20px', display: 'block'}} />\n                                        }\n                                    </div>\n                                }\n                                children={<OrderBlock {...order} />}\n                                footer={\n                                    <div className=\"u-flexbox\">\n                                        <div className=\"u-flex u-border-end\">\n                                            <Button\n                                                onClick={() => navigateToOrder(order.orderNumber, order.viewHref)}\n                                                type=\"button\"\n                                                title=\"View\"\n                                                className=\"u-width-full u-color-brand u-border-top\"\n                                                icon=\"review\"\n                                                showIconText={true}\n                                                iconClassName=\"u-margin-end\"\n                                                data-analytics-name={UI_NAME.view}\n                                            />\n                                        </div>\n                                        <div className=\"u-flex\">\n                                            <Button\n                                                type=\"button\"\n                                                title=\"Reorder\"\n                                                className=\"u-width-full u-color-brand u-border-top\"\n                                                icon=\"cart-v2\"\n                                                onClick={() => reorderItems(order.id || order.orderNumber)}\n                                                showIconText={true}\n                                                iconClassName=\"u-margin-end\"\n                                                data-analytics-name={UI_NAME.reorder}\n                                            />\n                                        </div>\n                                    </div>\n                                }\n                            />\n                        ))}\n                    </div>\n                    <Pagination\n                        className=\"u-padding-md\"\n                        onChange={(pageNumber) => setOrderListPage(pageNumber)}\n                        currentPage={currentPage}\n                        pageCount={numOfOrderPages}\n                        showCurrentPageMessage={true}\n                        showPageButtons={false}\n                    />\n                </div>\n            :\n                <NoOrder dashboardURL={dashboardURL} />\n            }\n        </div>\n    )\n}\n\nAccountOrderList.propTypes = {\n    currentPage: PropTypes.number,\n    dashboardURL: PropTypes.string,\n    navigateToOrder: PropTypes.func,\n    numOfOrderPages: PropTypes.number,\n    orders: PropTypes.array,\n    pageMeta: PropTypes.object,\n    reorderItems: PropTypes.func,\n    setOrderListPage: PropTypes.func\n}\n\nAccountOrderList.initAction = initialize\n\nconst mapStateToProps = createPropsSelector({\n    currentPage: getOrdersPage,\n    dashboardURL: getAccountURL,\n    orders: getOrderList,\n    pageMeta: getOrdersPageMeta,\n    numOfOrderPages: getNumOrderPages\n})\n\nconst mapDispatchToProps = {\n    reorderItems,\n    navigateToOrder,\n    setOrderListPage\n}\n\nexport default template(\n    connect(\n        mapStateToProps,\n        mapDispatchToProps\n    )(AccountOrderList)\n)\n"],"sourceRoot":""}